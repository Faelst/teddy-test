name: PR CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint_and_unit:
    if: ${{ !github.event.pull_request.draft }}
    name: Lint & Unit (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['22.x']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prisma generate
        if: hashFiles('prisma/schema.prisma') != ''
        run: npx prisma generate

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test -- --ci

  e2e:
    if: ${{ !github.event.pull_request.draft }}
    name: E2E (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    needs: [lint_and_unit]
    strategy:
      matrix:
        node: ['22.x']
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teddy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d teddy_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      rabbitmq:
        image: rabbitmq:3.13-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      RABBITMQ_URL: amqp://guest:guest@localhost:5672

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prisma generate
        if: hashFiles('prisma/schema.prisma') != ''
        run: npx prisma generate

      - name: Create .env from .env.example
        run: cp .env.example .env

      - name: E2E tests
        run: npm run test:e2e -- --ci --runInBand
