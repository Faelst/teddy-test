generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  urls Url[]

  // Login: busca por email ignorando soft-deletados
  @@index([email, deletedAt], map: "idx_user_email_active")
}

model Url {
  id          String    @id @default(uuid())
  code        String    @unique @db.VarChar(6)
  originalUrl String
  hits        BigInt    @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  UrlAccess UrlAccess[]

  // Redirect: code + filtro de ativo
  @@index([code, deletedAt], map: "idx_url_code_active")
  // Listagem do dono (mais comum: WHERE userId = ? AND deletedAt IS NULL ORDER BY createdAt DESC)
  @@index([userId, deletedAt, createdAt], map: "idx_url_user_active_created")
}

model UrlAccess {
  id        String   @id @default(uuid())
  urlId     String
  url       Url      @relation(fields: [urlId], references: [id])
  ip        String?
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())

  // Listagem de acessos (mais comum: WHERE urlId = ? ORDER BY createdAt DESC)
  @@index([urlId, createdAt])
}
